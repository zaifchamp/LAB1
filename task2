#include<conio.h>

#include<iostream>

using namespace std;

int main()

{

	int a[10][10], b[10][10], c[10][10];

	int x, y, i, j, m, n;



	cout << "\nEnter the number of rows and columns for Matrix A:::\n\n";

	cin >> x >> y;



	// x denotes # rows in matrix A

	// y denotes # columns in matrix A

	cout << "\n\nEnter elements for Matrix A :::\n\n";

	for (i = 0; i < x; i++)

	{

		for (j = 0; j < y; j++)

		{

			a[i][j] = rand() % 100 + 1;

		}

		cout << "\n";

	}

	cout << "\n\nMatrix A :\n\n";

	for (i = 0; i < x; i++)

	{

		for (j = 0; j < y; j++)

		{

			cout << "\t" << a[i][j];

		}

		cout << "\n\n";

	}

	cout << "\n-----------------------------------------------------------\n";

	cout << "\nEnter the # of rows and columns for Matrix B:::\n\n";

	cin >> m >> n;

	// m denotes number rows in matrix B

	// n denotes number columns in matrix B



	cout << "\n\nEnter elements for Matrix B :::\n\n";

	for (i = 0; i < m; i++)

	{

		for (j = 0; j < n; j++)

		{

			b[i][j] = rand() % 100 + 1;

		}

		cout << "\n";

	}

	cout << "\n\nMatrix B :\n\n";

	for (i = 0; i < m; i++)

	{

		for (j = 0; j < n; j++)

		{

			cout << "\t" << b[i][j];

		}

		cout << "\n\n";

	}


	int m1 = (a[0][0] + a[1][1]) * (b[0][0] + b[1][1]);		//stepwise
	int m2 = (a[1][0] + a[1][1]) * b[0][0];					//multiplying the elements
	int m3 = a[0][0] * (b[0][1] - b[1][1]);					//according to the Strassen's method
	int m4 = a[1][1] * (b[1][0] - b[0][0]);					//and 
	int m5 = (a[0][0] + a[0][1]) * b[1][1];					//storing 
	int m6 = (a[1][0] - a[0][0]) * (b[0][0] + b[0][1]);		//into temporary
	int m7 = (a[0][1] - a[1][1]) * (b[1][0] + b[1][1]);		//integers

c[0][0] = m1 + m4 - m5 + m7;                  //further process
	c[0][1] = m3 + m5;							//of Strassen's method
	c[1][0] = m2 + m4;							//by adding 
	c[1][1] = m1 - m2 + m3 + m6;

	_getch();

	return 0;
}





